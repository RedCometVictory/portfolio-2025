---
const { currentPage, totalPages, baseUrl } = Astro.props;
const prevArrow = `
<svg class="arrow-icon" id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 108.06"><title>back-arrow</title><path d="M63.94,24.28a14.28,14.28,0,0,0-20.36-20L4.1,44.42a14.27,14.27,0,0,0,0,20l38.69,39.35a14.27,14.27,0,0,0,20.35-20L48.06,68.41l60.66-.29a14.27,14.27,0,1,0-.23-28.54l-59.85.28,15.3-15.58Z"/></svg>
`;
const nextArrow = `
<svg class="arrow-icon" id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 108.06"><title>previous-arrow</title><path d="M58.94,24.28a14.27,14.27,0,0,1,20.35-20l39.49,40.16a14.28,14.28,0,0,1,0,20L80.09,103.79a14.27,14.27,0,1,1-20.35-20L74.82,68.41l-60.67-.29a14.27,14.27,0,0,1,.24-28.54l59.85.28L58.94,24.28Z"/></svg>
`;
---


<div class="pagination">
  <nav class="pagination__container">
    <ul class="pagination__list">
      {currentPage  > 1 && (
        <li>
          <a href={currentPage === 2 ? `${baseUrl}` : `${baseUrl}/${currentPage -1}`}>
            <span set:html={prevArrow}></span>
            Prev
          </a>
        </li>
      )}

      {Array.from({ length: totalPages }).map((_, i) => {
        const page = i + 1;
        const href = page === 1 ? `${baseUrl}` : `${baseUrl}/${page}`;
        const isActive = page === currentPage;
        return (
          <li>
            <a href={href} class={isActive ? 'is-active' : ''}>{page}</a>
          </li>
        );
      })}

      {currentPage < totalPages && (
        <li>
          <a href={`${baseUrl}/${currentPage + 1}`}>
            <span set:html={nextArrow}></span>
            Next
          </a>
        </li>
      )}
    </ul>
  </nav>
</div>